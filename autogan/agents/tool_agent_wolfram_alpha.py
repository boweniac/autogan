import re
from typing import Optional, Dict
from autogan.agents.universal_agent import UniversalAgent
from autogan.oai.count_tokens_utils import count_text_tokens
from autogan.tools.wolfram_alpha_tool import WolframAlphaAPIWrapper


class ToolAgentWolframAlpha(UniversalAgent):
    def __init__(
            self,
            wolfram_config: Dict,
            agent_config: Optional[Dict] = None,
            name: Optional[str] = "WolframAlphaExp",
            duty: Optional[str] = "I can assist you with solving or inquiring about: mathematical calculations, data analysis, scientific inquiries, geographic information, historical and cultural data, film and music data, financial information, unit and measurement conversions, etc.",
            work_flow: Optional[str] = "I need your help to translate the questions into "
                                       "parameters that the WolframAlpha API can accept.\n"
                                       "Note that I do not need you to help me directly get the results, "
                                       "nor do I need other correct politeness or explanatory words, please directly "
                                       "help me generate parameter. \n"
                                       "You must follow the formats below to write your query:"
                                       "\n```wolfram"
                                       "\n# one wolfram query"
                                       "\n```",
            # duty: Optional[str] = '我可以帮你通过 Wolfram Alpha 查询问题的答案。',
            # work_flow: Optional[str] = '我需要你帮我问题转换为 Wolfram Alpha 可以理解的英文提问，请注意我不需要你直接帮我得到结果，也不需要其他客套行话语，仅输出转换后的结果。'
            #                            '您必须遵循以下格式来编写查询：'
            #                            '```wolfram'
            #                            '# one wolfram query'
            #                            '# ```',
    ):
        """WolframAlphaExpert

        Receive user's questions, convert them into a format that Wolfram can understand,
        and then request answers from the Wolfram Alpha API.

        :param agent_config: The agent configuration includes:
            agent 配置包括：
            - main_model: The LLM configuration of the agent's main body.
                agent 主体的 LLM 配置。
            - summary_model: The LLM configuration used for compressing context and generating text summaries.
                用于压缩上下文以及生成文本摘要的 LLM 配置。
            - request_interval_time: The interval time of LLM requests.
                LLM 请求间隔时间。
            - request_timeout:The timeout of LLM requests.
                LLM 请求超时时间。
            - max_retries: The maximum number of retries for LLM requests.
                LLM 请求最大重试次数。
        :param wolfram_config: JSON format of email_config
            {"app_id": ""}
        :param name: The agent name should be unique in the organizational structure.
        :param duty: Used to explain one's job responsibilities to other agents.
        :param work_flow: Defines the workflow of the agent.
            定义 agent 的工作流程。
        """
        super().__init__(
            name,
            agent_config=agent_config,
            duty=duty,
            work_flow=work_flow,
            use_tool="join"
        )
        self._wolfram_alpha_api_wrapper = WolframAlphaAPIWrapper(wolfram_config)

    def tool_function(self, task_id: str, param: Optional[str] = None,
                      tokens: Optional[int] = None) -> tuple[str, int]:
        # Extract Wolfram questions from the text generated by LLM.
        pattern = "```wolfram\n(.*?)```"
        param = re.search(pattern, param, re.DOTALL).group(1)

        # Call wolfram alpha api
        reply = self._wolfram_alpha_api_wrapper.run(param)
        if reply:
            tokens = count_text_tokens(reply)
            return reply, tokens
        else:
            return "Request failed, you can choose to retry", 8
